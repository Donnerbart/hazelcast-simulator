#!/usr/bin/env bash

# exit on error
set -e
# Printing the command being executed (useful for debugging)
#set -x

image_width=1280
image_height=1024

if [ -z "${SIMULATOR_HOME}" ] ; then
    export SIMULATOR_HOME=$(cd $(dirname $(readlink -f $0 2> /dev/null || readlink $0 2> /dev/null || echo $0))/.. && pwd)
fi

# TODO:
# - clients and members (we don't want to see members in the throughput in case of client test)
# - cut of parts off the plot which are after completion or before start.
# - graphs from same benchmark, same color: in case of multiple benchmarks
# - time in the hdr file; should be expressed in micro's instead of milli's with a comma?
# - from one of the latency:  [3.19078e+06:3.19078e+06], adjusting to [3.15888e+06:3.22269e+06]
# - test suite / jvm parameters etc should all be copied into the output directory so the whole bundle is self explaining.
# - regular latency histogram contains all hgrm files from each benchmark for each commulative probe; but no info which probe
# - summary of the benchmark
#
# DONE
#
# Nice to have
# - attractive plots
#           http://stackoverflow.com/questions/10496469/how-do-i-enable-the-pngcairo-terminal-in-gnuplot
# - generate 2 size pictures small/large
# - better colours
# - links to the benchmark directories should be made available in the html report.
# - gc info: https://github.com/chewiebug/GCViewer


# ================================== reading commandline =============================


svg=false
aggregation_only=false
raw_time=false

while getopts ":shar" opt; do
  case $opt in
    a)
       aggregation_only=true
       ;;
    s)
      svg=true
      ;;
    r)
      raw_time=true
      ;;
    h)
      echo "Benchmark report usage"
      echo "SYNOPSIS"
      echo "    benchmark-report [-r] [-a] [-f] output_directory benchmark_directory ..."
      echo "Description"
      echo "    -r   Use the actual time in the plots. This is useful for debugging"
      echo "    -a   Only show aggregated information and skip per worker detail"
      echo "    -s   Use SVG Graphics instead of PNG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done
shift $((OPTIND-1))

if [ "$svg" = true ] ; then
   img_extension=svg
else
   img_extension=png
fi

output_dir="$1"
echo output_dir = $output_dir

report_file="${output_dir}/report.html"
shift
benchmark_dirs=("$@")

for benchmark_dir in "${benchmark_dirs[@]}" ; do
    if [ ! -d "$benchmark_dir" ] ; then
        echo "benchmark directory $benchmark_dir does not exist"
        exit 1
    fi
done


# ================================== general functions =============================

verify_software()
{
    # Check if gnuplot is installed.
    if ! hash gnuplot 2>/dev/null ; then
        echo gnuplot is not installed! Aborting.

        os=$(uname)
        if [[ $os == *"arwin"* ]]
        then
              echo gnuplot is available on OSX using homebrew: http://brewformulas.org/gnuplot
              echo To install gnuplot using homebrew type: 'brew install gnuplot'
        fi

        exit 1
    fi
}

# ================================== gnuplot functions =============================

plot_start(){
    rm -fr gnuplot.tmp
}

plot_complete(){
    gnuplot gnuplot.tmp
    rm gnuplot.tmp
}

plot(){
    command=$1
    echo "$command" >> gnuplot.tmp
}

# ================================== html functions =============================


html_h1(){
    title=$1
    html "<h1>$title</h1>"
}

html_h2(){
    title=$1
    html "<h2>$title</h2>"
}

html_h3(){
    title=$1
    html "<h3>$title</h3>"
}

html_img(){
     img=$1
     image_file="$output_dir/images/${img}.${img_extension}"
     html "<img src=\"images/${img}.${img_extension}\" style=\"width:640px;height:512px;\" onclick=\"window.open(this.src)\">"
}

html(){
    text=$1
    echo "$text" >> $report_file
}

# ============================================================================

report_start(){
    rm -fr $report_file

    title=""
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        benchmark_name=$(basename $benchmark_dir)
        if [ -z "$title" ]; then
            title="$benchmark_name"
        else
            title="$title vs $benchmark_name"
        fi
    done
    html "<html>"
    html "<head><title>Benchmark: $title</title></head>"
    html "<body>"
}

report_throughput(){
    echo "Reporting throughput"

    # Throughput per member
    plot_start
    plot "set title 'Throughput Per Machine'"
    plot "set style data lines"
    plot 'set datafile separator ","'
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "set key below"
    plot "set xdata time"
    plot "set timefmt \"%s\""
    if [ "$raw_time" = true ] ; then
        plot "set format x \"%m-%d\n%H:%M\""
        plot "t0(x)=(x)"
        plot "set xlabel 'Time'"
    else
        plot "offset = 0"
        plot "t0(x)=(offset=(\$0==0) ? x : offset, x - offset)"
        plot "set xlabel 'Time seconds'"
    fi
    plot "set ylabel 'operations/second'"
    plot "set format y '%.0f'"
    plot "set output '$output_dir/images/throughput_per_worker.${img_extension}'"
    plot "plot \\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        performance_logs=($(find $benchmark_dir -name performance.csv))
        benchmark_name=$(basename $benchmark_dir)

        for performance_log in "${performance_logs[@]}"
        do
            if [ ${#benchmark_dirs[@]} -eq 1 ]; then
                worker_name=$(basename $(dirname $performance_log))
            else
                worker_name="${benchmark_name}#$(basename $(dirname $performance_log))"
            fi
            # we need to skip the first line because it contains header info and the time logic will choke on it.
            plot "   \"$performance_log\" every ::1 using (t0(timecolumn(1))):5  title '$worker_name'   noenhanced with lines, \\"
        done
    done
    plot_complete


    # Aggregated throughput
    plot_start
    plot "set style data lines"
    plot 'set datafile separator ","'
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "set key below"
    plot "set xlabel 'Time seconds'"
    plot "set xdata time"
    plot "set timefmt \"%s\""
    if [ "$raw_time" = true ] ; then
        plot "set format x \"%m-%d\n%H:%M\""
        plot "t0(x)=(x)"
        plot "set xlabel 'Time'"
    else
        plot "offset = 0"
        plot "t0(x)=(offset=(\$0==0) ? x : offset, x - offset)"
        plot "set xlabel 'Time seconds'"
    fi
    plot "set title 'Throughput Aggregated'"
    plot "set ylabel 'operations/second'"
    plot "set format y '%.0f'"
    plot "set output '$output_dir/images/throughput_aggregated.${img_extension}'"
    plot "plot \\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        performance_logs=($(find $benchmark_dir -name performance.csv))
        benchmark_name=$(basename $benchmark_dir)
        aggregated_file="${benchmark_name}_throughput_aggregated.tmp"

        # merge the operations/second column of all files and write that aggregated_file
        awk -F ',' '
        {
            sum[FNR]+=$5;
            b[FNR]++;
            name[FNR]=$1;
        } END {
            for(i=1;i<=FNR;i++)
                printf "%s, %.2f\n", name[i],sum[i];
            }' "${performance_logs[@]
        }" > "${aggregated_file}"

        # cut of first line because it contains the headers.
        sed -i -e 1,1d "${aggregated_file}"

        plot " \"${aggregated_file}\" using (t0(timecolumn(1))):2 title '${benchmark_name}' noenhanced with lines , \\"
    done
    plot_complete

    html_h1 "Throughput"
    html_h2 "Throughput"
    html_img "throughput_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "throughput_per_worker"
    fi

    html "<table border=\"2\">"
    html "<tr><th>Benchmark</th><th>Average</th><th>Median</th><th>Min</th><th>Max</th></tr>"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        benchmark_name=$(basename $benchmark_dir)
        aggregated_file="${benchmark_name}_throughput_aggregated.tmp"
        html_stats "${aggregated_file}" 2 $benchmark_name
    done
    html "</table>"

    rm -fr *.tmp
    rm -fr *.tmp-e
}

html_stats()
{
    csv_file=$1
    column=$2
    benchmark_name=$3

    # first we write the column into a file.
    awk -v column=$column  '{print $column}' ${csv_file} > tmp

    # then we calculate the results.
    result=$( cat tmp | sort -n | awk '
        BEGIN {
            c = 0;
            sum = 0;
        }
        $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
            a[c++] = $1;
        sum += $1;
        }
        END {
            mean = sum / c;
            if( (c % 2) == 1 ) {
                median = a[ int(c/2) ];
            } else {
                median = ( a[c/2] + a[c/2-1] ) / 2;
            }
            OFS="\t";
            print c, mean, median, a[0], a[c-1];
        }')

    rm tmp

    stats=($result)

    html "<tr><th>$benchmark_name</th><td>${stats[1]}</td><td>${stats[2]}</td><td>${stats[3]}</td><td>${stats[4]}</td></tr>"
}

plot_latency_stat(){
    title=$1
    ylabel=$2
    image=$3
    column=$4

    plot_start
    plot "set style data lines"
    plot "set datafile separator \",\""
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "set key below"
    plot "set title '$title'"
    if [ "$raw_time" = true ] ; then
        plot "set format x \"%m-%d\n%H:%M\""
        plot "t0(x)=(x)"
        plot "set xlabel 'Time'"
    else
        plot "offset = 0"
        plot "t0(x)=(offset=(\$0==0) ? x : offset, x - offset)"
        plot "set xlabel 'Time seconds'"
    fi
    plot "set ylabel '${ylabel}'"
    plot "set xdata time"
    plot "set timefmt \"%s\""
    plot "set output '$output_dir/images/${image}.${img_extension}'"
    plot "plot \\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        # look for all the hgrm in the root dir of the benchmark (so no member level)
        hgrm_files=($(find $benchmark_dir -maxdepth 1 -name *.hgrm))
        benchmark_name=$(basename $benchmark_dir)

        for hgrm_file in "${hgrm_files[@]}"
        do
            worker_name=$(basename $(dirname $hgrm_file))
            file_name_no_extension=$(basename "$hgrm_file" .hgrm)
            dirname=$(dirname $hgrm_file)
            file_name="$dirname/$file_name_no_extension"

            if [ ${#benchmark_dirs[@]} -eq 1 ]; then
                # there is only 1 benchmark.
                line_title="$worker_name"
            else
                # there is more than 1 benchmark; so we include the benchmark name
                line_title="${benchmark_name}_${worker_name}"
            fi

            # the first column starts from 0, the second column starts from 'epoch time'.
            if [ "$raw_time" = true ] ; then xcolumn=2; else xcolumn=1;  fi

            # first 4 lines contain header info.
            plot "  \"$file_name\" every ::2  using $xcolumn:$column title '${line_title}' noenhanced with lines, \\"
         done
    done
    plot_complete
}

report_latency(){
    echo "Reporting latencies"

    html_h1 "Latency"

    plot_start
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "unset xtics"
    plot "set ylabel 'Latency (μs)'"
    plot "set logscale x"
    plot "set key top left"
    plot "set style line 1 lt 1 lw 3 pt 3 linecolor rgb \"red\""
    plot "set output '$output_dir/images/latency.${img_extension}'"
    plot "plot '${SIMULATOR_HOME}/bin/xlabels.dat' with labels center offset 0, 1.5 point,\\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        # look for all the hgrm in the root dir of the benchmark (so no member level)
        hgrm_files=($(find $benchmark_dir -maxdepth 1 -name *.hgrm))
        benchmark_name=$(basename $benchmark_dir)

        for hgrm_file in "${hgrm_files[@]}"
        do
            worker_name=$(basename $(dirname $hgrm_file))

            if [ ${#benchmark_dirs[@]} -eq 1 ]; then
                line_title="$worker_name"
            else
                line_title="${benchmark_name}_${worker_name}"
            fi

            plot "   \"$hgrm_file\" using 4:1 with lines, \\"
        done
    done
    plot_complete
    html_h2 "Latency"
    html_img "latency"

    html_h3 "Latency interval 25%"
    plot_latency_stat "Interval 25%" "Latency (μs)" "interval_25" 4
    html_img "interval_25"

    html_h3 "Latency interval 50%"
    plot_latency_stat "Interval 50%" "Latency (μs)" "interval_50" 5
    html_img "interval_50"

    html_h3 "Latency interval 75%"
    plot_latency_stat "Interval 75%" "Latency (μs)" "interval_75" 6
    html_img "interval_75"

    html_h3 "Latency interval 90%"
    plot_latency_stat "Interval 90%" "Latency (μs)" "interval_90" 7
    html_img "interval_90"

    html_h3 "Latency interval 99%"
    plot_latency_stat "Interval 99%" "Latency (μs)" "interval_99" 8
    html_img "interval_99"

    html_h3 "Latency interval 99.9%"
    plot_latency_stat "Interval 99.9%" "Latency (μs)" "interval_999" 9
    html_img "interval_999"

    html_h3 "Latency interval 99.99%"
    plot_latency_stat "Interval 99.99%" "Latency (μs)" "interval_9999" 10
    html_img "interval_9999"

    html_h3 "Latency interval 99.999%"
    plot_latency_stat "Interval 99.999%" "Latency (μs)" "interval_99999" 11
    html_img "interval_99999"

    html_h3 "Latency interval Min"
    plot_latency_stat "Interval Min" "Latency (μs)" "interval_min" 12
    html_img "interval_min"

    html_h3 "Latency interval Max"
    plot_latency_stat "Interval Max" "Latency (μs)" "interval_max" 13
    html_img "interval_max"

    html_h3 "Latency interval Mean"
    plot_latency_stat "Interval Mean" "Latency (μs)" "interval_mean" 14
    html_img "interval_mean"

    html_h3 "Latency interval Std Deviation"
    plot_latency_stat "Interval Std Deviation" "Latency (μs)" "interval_std_deviation" 15
    html_img "interval_std_deviation"
}

plot_dstat_probe(){
    title=$1
    ylabel=$2
    image=$3
    format_y=$4
    multiplier_y=$5
    column=$6

    # first we do per member.
    plot_start
    plot "set style data lines"
    plot "set datafile separator \",\""
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "set key below"
    plot "set xdata time"
    plot "set timefmt \"%s\""
    if [ "$raw_time" = true ] ; then
        plot "set format x \"%m-%d\n%H:%M\""
        plot "t0(x)=(x)"
        plot "set xlabel 'Time'"
    else
        plot "offset = 0"
        plot "t0(x)=(offset=(\$0==0) ? x : offset, x - offset)"
        plot "set xlabel 'Time seconds'"
    fi
    plot "set title '$title'"
    plot "set ylabel '$ylabel'"
    if [ -n "$format_y" ]; then
        plot "set format y '$format_y'"
    fi
    plot "set output '$output_dir/images/${image}.${img_extension}'"
    plot "plot \\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        dstat_files=($(find $benchmark_dir -name dstat.csv))
        benchmark_name=$(basename $benchmark_dir)

        for dstat_file in "${dstat_files[@]}"
        do
            worker_name=$(basename $(dirname $dstat_file))

            if [ ${#benchmark_dirs[@]} -eq 1 ]; then
                line_title="$worker_name"
            else
                line_title="${benchmark_name}_${worker_name}"
            fi

            # The worker file contains 2 columsn, 1 the timestap, 2 the selected column from the dstats file
            worker_file="${benchmark_name}-${worker_name}.single.tmp"

            # select the first (time) and desired column and write it to tmp
            awk -F "," -v column=$column '{printf "%s,%s\n",$1,$column}' $dstat_file > "$worker_file"

            # remove the first 7 lines, since they contain header info
            sed -i -e 1,7d "$worker_file"

            # and then we plot worker_file
            plot "   \"$worker_file\" using (t0(timecolumn(1))):($multiplier_y * \$2) title '$line_title' noenhanced with lines, \\"
        done
    done
    plot_complete

    # now we do the aggregation of all members
    plot_start
    plot "set style data lines"
    plot "set datafile separator \",\""
    if [ "$svg" = true ] ; then
        plot "set term svg enhanced mouse size $image_width,$image_height"
    else
        plot "set terminal png size $image_width,$image_height"
    fi
    plot "set grid"
    plot "set key below"
    plot "set xdata time"
    plot "set timefmt \"%s\""
    if [ "$raw_time" = true ] ; then
        plot "set format x \"%m-%d\n%H:%M\""
        plot "t0(x)=(x)"
        plot "set xlabel 'Time'"
    else
        plot "offset = 0"
        plot "t0(x)=(offset=(\$0==0) ? x : offset, x - offset)"
        plot "set xlabel 'Time seconds'"
    fi
    plot "set title '$title Aggregated'"
    plot "set ylabel '$ylabel'"
    if [ -n "$format_y" ]; then
        plot "set format y '$format_y'"
    fi
    plot "set output '$output_dir/images/${image}_aggregated.${img_extension}'"
    plot "plot \\"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        benchmark_name=$(basename $benchmark_dir)
        aggregated_file="${benchmark_name}_aggregated.tmp"

        files=($(find ${benchmark_name}-*.single.tmp))

        # merge the operations/second column of all files and write that to aggregated file
        awk -F ',' '
        {
            sum[FNR]+=$2;
            b[FNR]++;
            name[FNR]=$1;
        } END {
            for(i=1;i<=FNR;i++)
                printf "%s, %.2f\n", name[i],sum[i];
            }' "${files[@]
        }" > ${aggregated_file}

        plot " \"${aggregated_file}\" using (t0(timecolumn(1))):($multiplier_y * \$2) title '${benchmark_name}' noenhanced with lines , \\"
    done
    plot_complete

    html "<table border=\"2\">"
    html "<tr><th>Benchmark</th><th>Average</th><th>Median</th><th>Min</th><th>Max</th></tr>"
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        benchmark_name=$(basename $benchmark_dir)
        aggregated_file="${benchmark_name}_aggregated.tmp"
        html_stats "${aggregated_file}" 2 $benchmark_name
    done
    html "</table>"

    rm -fr *.tmp
    rm -fr *.tmp-e
}

report_dstat()
{
    echo "Reporting dstat"

    html_h1 DStat

    # Checking if dstat information is available in the benchmarks.
    dstat_files_found=0
    for benchmark_dir in "${benchmark_dirs[@]}"
    do
        dstat_files=($(find $benchmark_dir -name dstat.csv))

        if [ ! ${#dstat_files[@]} -eq 0 ]; then
            dstat_files_found=1
        fi
    done
    if [ $dstat_files_found -eq 0 ]; then
        html "No dstat information is found. Check the SIMULATOR_HOME/conf/worker.sh for an example how to enable dstat"
        return
    fi

    ###################################################
    #               CPU
    ###################################################

    html_h2 "Total Cpu Usage"

    html_h3 "CPU User"
    html_img "cpu_user_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "cpu_user"
    fi

    plot_dstat_probe "CPU User %" "CPU User %" "cpu_user" "" "1" 6

    html_h3 "CPU System"
    html_img "cpu_system_aggregated"
    if [ "$aggregation_only" = false ] ; then
      html_img "cpu_system"
    fi
    plot_dstat_probe "CPU System %" "CPU System %" "cpu_system" "" "1" 7

    html_h3 "CPU Idle"
    html_img "cpu_idle_aggregated"
    if [ "$aggregation_only" = false ] ; then
      html_img "cpu_idle"
    fi
    plot_dstat_probe "CPU Idle %" "CPU Idle %" "cpu_idle" "" "1" 8

    html_h3 "CPU Wait"
    html_img "cpu_wait_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "cpu_wait"
    fi
    plot_dstat_probe "CPU Wait %" "CPU Wait %" "cpu_wait" "" "1" 9

    ###################################################
    #               memory
    ###################################################
    html_h2 "Memory Usage"

    html_h3 "memory Used"
    html_img "memory_used_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "memory_used"
    fi
    plot_dstat_probe "Memory Used" "Memory Used" "memory_used" "%.0s%cByte" "1" 2

    html_h3 "Memory Cached"
    html_img "memory_cached_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "memory_cached"
    fi
    plot_dstat_probe "Memory Buffered" "Memory Buffered" "memory_buffered" "%.0s%cByte" "1" 3

    html_h3 "Memory Buffered"
    html_img "memory_buffered_aggregated"

    if [ "$aggregation_only" = false ] ; then
        html_img "memory_buffered"
    fi
    plot_dstat_probe "Memory Cached" "Memory Cached" "memory_cached" "%.0s%cByte" "1" 4

    html_h3 "Memory Free"
    html_img "memory_free_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "memory_free"
    fi
    plot_dstat_probe "Memory Free" "Memory Free" "memory_free" "%.0s%cByte" "1" 5

    ###################################################
    #               Interrupts
    ###################################################

    html_h2 "Interrupts"

    html_h3 "CPU Hardware Interrupts"
    html_img "cpu_hardware_interrupts_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "cpu_hardware_interrupts"
    fi
    plot_dstat_probe "CPU Hardware Interrupts" "CPU Hardware Interrupts/sec" "cpu_hardware_interrupts" "" "1" 10

    html_h3 "CPU Software Interrupts"
    html_img "cpu_software_interrupts_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "cpu_software_interrupts"
    fi
    plot_dstat_probe "CPU Software Interrupts" "CPU Software Interrupts/sec" "cpu_software_interrupts" "" "1" 11

    ###################################################
    #               Network
    ###################################################

    html_h2 "Network"

    html_h3 "Net Receive"
    html_img "net_receive_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "net_receive"
    fi
    plot_dstat_probe "Net Receive" "Receiving/second" "net_receive" "%.0s%cbit" "8" 14

    html_h3 "Net send"
    html_img "net_send_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "net_send"
    fi
    plot_dstat_probe "Net Send" "Sending/second" "net_send" "%.0s%cbit" "8" 15

    ###################################################
    #               System
    ###################################################

    html_h2 "System"

    html_h3 "System Interrupts"
    html_img "system_interrupts_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "system_interrupts"
    fi
    plot_dstat_probe "System Interrupts" "System Interrupts/second" "system_interrupts" "" "1" 17

    html_h3 "System Context Switches"
    html_img "system_context_switches_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "system_context_switches"
    fi
    plot_dstat_probe "System Context Switches" "System Context Switches/sec" "system_context_switches" "" "1" 18

    ###################################################
    #               Disk
    ###################################################

    html_h2 "Disk"

    html_h3 "Disk Read"
    html_img "disk_read_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "disk_read"
    fi
    plot_dstat_probe "Disk Read" "" "disk_read" "%.0s%cByte" "1" 17

    html_h3 "Disk Write"
    html_img "disk_write_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "disk_write"
    fi
    plot_dstat_probe "Disk Write" "" "disk_write" "%.0s%cByte" "1" 18

    ###################################################
    #               Paging
    ###################################################

    html_h2 "Paging"

    html_h3 "Page In"
    html_img "page_in_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "page_in"
    fi
    plot_dstat_probe "Page In" "Pages in" "page_in" "" "1" 12

    html_h3 "Page Out"
    html_img "page_out_aggregated"
    if [ "$aggregation_only" = false ] ; then
        html_img "page_out"
    fi
    plot_dstat_probe "Page Out" "Pages out" "page_out" "" "1" 13
}

report_end(){
    html "</body>"
    html "</html>"
}

mkdir -p $output_dir
mkdir -p $output_dir/images

for benchmark_dir in "${benchmark_dirs[@]}"
do
    echo "Copying $benchmark_dir into $output_dir"
    cp -r $benchmark_dir $output_dir
done

verify_software

report_start

report_throughput

report_latency

report_dstat

report_end

echo Benchmark report available at: $output_dir

